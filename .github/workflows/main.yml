# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy with EC2

on:
  push:
    branches: [ "master" ]
    
permissions:
  contents: read
  
env:
  PROJECT_NAME: yogiga_project
  BUCKET_NAME: yogiga-bucket
  CODE_DEPLOY_APP_NAME: Yogiga
  DEPLOYMENT_GROUP_NAME: githubaction-group

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    - uses: actions/checkout@v3
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties
#    - uses: actions/upload-artifact@v3
#      with:
#        name: application.properties
#        path: ./src/main/resources/application.properties    
      
    - name: Build with Gradle
      #uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      #with:
       # arguments: build
      run: ./gradlew clean build -x test
      shell: bash
      
    - name: Make Zip File
      run: zip -qq -r ./$Yogiga.zip .
      shell: bash     
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2      
      
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$Yogiga.zip s3://$BUCKET_NAME/$PROJECT_NAME/$Yogiga.zip
      
    - name: deploy with AWS codeDeploy
      run: aws deploy create-deployment
        --application-name $CODE_DEPLOY_APP_NAME
        --deployment-config-name CodeDeployDefault.OneAtATime  
        --deployment-group-name $DEPLOYMENT_GROUP_NAME
        --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$Yogiga.zip
    
